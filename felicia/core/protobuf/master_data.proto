syntax = "proto3";

import "felicia/core/protobuf/channel.proto";

package felicia;

message NodeInfo {
  string name = 1;
  uint32 client_id = 2;
  bool watcher = 3;
}

message PubSubTopics {
  repeated string publishing_topics = 2;
  repeated string subscribing_topics = 3;
}

message ClientInfo {
  uint32 id = 1;
  ChannelSource heart_beat_signaller_source = 2;
  ChannelSource master_notification_watcher_source = 3;
  uint32 heart_beat_duration = 4;  // in milliseconds
}

message TopicInfo {
  enum Status {
    REGISTERED = 0;
    UNREGISTERED = 1;
  }

  enum ImplType {
    PROTOBUF = 0;
    ROS = 1;
  }

  string topic = 1;
  string type_name = 2;
  ImplType impl_type = 3;
  ChannelSource topic_source = 4;
  Status status = 5;
  string ros_node_name = 6;
}

message ServiceInfo {
  enum Status {
    REGISTERED = 0;
    UNREGISTERED = 1;
  }

  string service = 1;
  string type_name = 2;
  ChannelSource service_source = 3;
  Status status = 4;
}

message MasterNotification {
  TopicInfo topic_info = 1;
  ServiceInfo service_info = 2;
}

// Element inside NodeFilter are mutually exclusive.
// If either of one is set at the same time, only one element is effective.
message ClientFilter {
  bool all = 1;
  uint32 id = 2;
}

// Element inside NodeFilter are mutually exclusive.
// If either of one is set at the same time, only one element is effective.
message NodeFilter {
  bool all = 1;
  string publishing_topic = 2;
  string subscribing_topic = 3;
  string requesting_service = 4;
  string serving_service = 5;
  string name = 6;
  bool watcher = 7;
}

// Element inside TopicFilter are mutually exclusive.
// If either of one is set at the same time, only one element is effective.
message TopicFilter {
  bool all = 1;
  string topic = 2;
}

// Element inside ServiceFilter are mutually exclusive.
// If either of one is set at the same time, only one element is effective.
message ServiceFilter {
  bool all = 1;
  string service = 2;
}

message HeartBeat {
  bool ok = 1;
}