import { inject, observer } from 'mobx-react';
import PropTypes from 'prop-types';
import React, { Component } from 'react';

import {
  HumanBody,
  HumanBodyModel,
  ImageWithHumansMessage,
} from '@felicia-viz/proto/messages/human';
import { ActivatableFloatPanel, ResizableCanvas } from '@felicia-viz/ui';
import ImageWorker from '@felicia-viz/ui/webworkers/image-webworker';

const {
  HUMAN_BODY_NONE,
  HUMAN_BODY_NOSE,
  HUMAN_BODY_NECK,
  HUMAN_BODY_R_SHOULDER,
  HUMAN_BODY_R_ELBOW,
  HUMAN_BODY_R_WRIST,
  HUMAN_BODY_L_SHOULDER,
  HUMAN_BODY_L_ELBOW,
  HUMAN_BODY_L_WRIST,
  HUMAN_BODY_M_HIP,
  HUMAN_BODY_R_HIP,
  HUMAN_BODY_R_KNEE,
  HUMAN_BODY_R_ANKLE,
  HUMAN_BODY_L_HIP,
  HUMAN_BODY_L_KNEE,
  HUMAN_BODY_L_ANKLE,
  HUMAN_BODY_R_EYE,
  HUMAN_BODY_L_EYE,
  HUMAN_BODY_R_EAR,
  HUMAN_BODY_L_EAR,
  HUMAN_BODY_L_BIG_TOE,
  HUMAN_BODY_L_SMALL_TOE,
  HUMAN_BODY_L_HEEL,
  HUMAN_BODY_R_BIG_TOE,
  HUMAN_BODY_R_SMALL_TOE,
  HUMAN_BODY_R_HEEL,
  HUMAN_BODY_HEAD,
  HUMAN_BODY_CHEST,

  HUMAN_BODY_L_HAND,
  HUMAN_BODY_L_THUMB_1_CMC,
  HUMAN_BODY_L_THUMB_2_KNUCKLES,
  HUMAN_BODY_L_THUMB_3_IP,
  HUMAN_BODY_L_THUMB_4_FINGER_TIP,
  HUMAN_BODY_L_INDEX_1_KNUCKLES,
  HUMAN_BODY_L_INDEX_2_PIP,
  HUMAN_BODY_L_INDEX_3_DIP,
  HUMAN_BODY_L_INDEX_4_FINGER_TIP,
  HUMAN_BODY_L_MIDDLE_1_KNUCKLES,
  HUMAN_BODY_L_MIDDLE_2_PIP,
  HUMAN_BODY_L_MIDDLE_3_DIP,
  HUMAN_BODY_L_MIDDLE_4_FINGER_TIP,
  HUMAN_BODY_L_RING_1_KNUCKLES,
  HUMAN_BODY_L_RING_2_PIP,
  HUMAN_BODY_L_RING_3_DIP,
  HUMAN_BODY_L_RING_4_FINGER_TIP,
  HUMAN_BODY_L_PINKY_1_KNUCKLES,
  HUMAN_BODY_L_PINKY_2_PIP,
  HUMAN_BODY_L_PINKY_3_DIP,
  HUMAN_BODY_L_PINKY_4_FINGER_TIP,
  HUMAN_BODY_R_HAND,
  HUMAN_BODY_R_THUMB_1_CMC,
  HUMAN_BODY_R_THUMB_2_KNUCKLES,
  HUMAN_BODY_R_THUMB_3_IP,
  HUMAN_BODY_R_THUMB_4_FINGER_TIP,
  HUMAN_BODY_R_INDEX_1_KNUCKLES,
  HUMAN_BODY_R_INDEX_2_PIP,
  HUMAN_BODY_R_INDEX_3_DIP,
  HUMAN_BODY_R_INDEX_4_FINGER_TIP,
  HUMAN_BODY_R_MIDDLE_1_KNUCKLES,
  HUMAN_BODY_R_MIDDLE_2_PIP,
  HUMAN_BODY_R_MIDDLE_3_DIP,
  HUMAN_BODY_R_MIDDLE_4_FINGER_TIP,
  HUMAN_BODY_R_RING_1_KNUCKLES,
  HUMAN_BODY_R_RING_2_PIP,
  HUMAN_BODY_R_RING_3_DIP,
  HUMAN_BODY_R_RING_4_FINGER_TIP,
  HUMAN_BODY_R_PINKY_1_KNUCKLES,
  HUMAN_BODY_R_PINKY_2_PIP,
  HUMAN_BODY_R_PINKY_3_DIP,
  HUMAN_BODY_R_PINKY_4_FINGER_TIP,

  HUMAN_BODY_FACE_COUNTOUR_0,
  HUMAN_BODY_FACE_COUNTOUR_1,
  HUMAN_BODY_FACE_COUNTOUR_2,
  HUMAN_BODY_FACE_COUNTOUR_3,
  HUMAN_BODY_FACE_COUNTOUR_4,
  HUMAN_BODY_FACE_COUNTOUR_5,
  HUMAN_BODY_FACE_COUNTOUR_6,
  HUMAN_BODY_FACE_COUNTOUR_7,
  HUMAN_BODY_FACE_COUNTOUR_8,
  HUMAN_BODY_FACE_COUNTOUR_9,
  HUMAN_BODY_FACE_COUNTOUR_10,
  HUMAN_BODY_FACE_COUNTOUR_11,
  HUMAN_BODY_FACE_COUNTOUR_12,
  HUMAN_BODY_FACE_COUNTOUR_13,
  HUMAN_BODY_FACE_COUNTOUR_14,
  HUMAN_BODY_FACE_COUNTOUR_15,
  HUMAN_BODY_FACE_COUNTOUR_16,
  HUMAN_BODY_R_EYE_BROW_0,
  HUMAN_BODY_R_EYE_BROW_1,
  HUMAN_BODY_R_EYE_BROW_2,
  HUMAN_BODY_R_EYE_BROW_3,
  HUMAN_BODY_R_EYE_BROW_4,
  HUMAN_BODY_L_EYE_BROW_4,
  HUMAN_BODY_L_EYE_BROW_3,
  HUMAN_BODY_L_EYE_BROW_2,
  HUMAN_BODY_L_EYE_BROW_1,
  HUMAN_BODY_L_EYE_BROW_0,
  HUMAN_BODY_NOSE_UPPER_0,
  HUMAN_BODY_NOSE_UPPER_1,
  HUMAN_BODY_NOSE_UPPER_2,
  HUMAN_BODY_NOSE_UPPER_3,
  HUMAN_BODY_NOSE_LOWER_0,
  HUMAN_BODY_NOSE_LOWER_1,
  HUMAN_BODY_NOSE_LOWER_2,
  HUMAN_BODY_NOSE_LOWER_3,
  HUMAN_BODY_NOSE_LOWER_4,
  HUMAN_BODY_R_EYE_0,
  HUMAN_BODY_R_EYE_1,
  HUMAN_BODY_R_EYE_2,
  HUMAN_BODY_R_EYE_3,
  HUMAN_BODY_R_EYE_4,
  HUMAN_BODY_R_EYE_5,
  HUMAN_BODY_L_EYE_0,
  HUMAN_BODY_L_EYE_1,
  HUMAN_BODY_L_EYE_2,
  HUMAN_BODY_L_EYE_3,
  HUMAN_BODY_L_EYE_4,
  HUMAN_BODY_L_EYE_5,
  HUMAN_BODY_O_MOUSE_0,
  HUMAN_BODY_O_MOUSE_1,
  HUMAN_BODY_O_MOUSE_2,
  HUMAN_BODY_O_MOUSE_3,
  HUMAN_BODY_O_MOUSE_4,
  HUMAN_BODY_O_MOUSE_5,
  HUMAN_BODY_O_MOUSE_6,
  HUMAN_BODY_O_MOUSE_7,
  HUMAN_BODY_O_MOUSE_8,
  HUMAN_BODY_O_MOUSE_9,
  HUMAN_BODY_O_MOUSE_10,
  HUMAN_BODY_O_MOUSE_11,
  HUMAN_BODY_I_MOUSE_0,
  HUMAN_BODY_I_MOUSE_1,
  HUMAN_BODY_I_MOUSE_2,
  HUMAN_BODY_I_MOUSE_3,
  HUMAN_BODY_I_MOUSE_4,
  HUMAN_BODY_I_MOUSE_5,
  HUMAN_BODY_I_MOUSE_6,
  HUMAN_BODY_I_MOUSE_7,
  HUMAN_BODY_R_PUPIL, // eslint-disable-line
  HUMAN_BODY_L_PUPIL,
} = HumanBody.values;

const BODY_25_PAIRS = [
  [HUMAN_BODY_NOSE, HUMAN_BODY_NECK],
  [HUMAN_BODY_NOSE, HUMAN_BODY_R_EYE],
  [HUMAN_BODY_R_EYE, HUMAN_BODY_R_EAR],
  [HUMAN_BODY_NOSE, HUMAN_BODY_L_EYE],
  [HUMAN_BODY_L_EYE, HUMAN_BODY_L_EAR],
  [HUMAN_BODY_NECK, HUMAN_BODY_R_SHOULDER],
  [HUMAN_BODY_R_SHOULDER, HUMAN_BODY_R_ELBOW],
  [HUMAN_BODY_R_ELBOW, HUMAN_BODY_R_WRIST],
  [HUMAN_BODY_NECK, HUMAN_BODY_L_SHOULDER],
  [HUMAN_BODY_L_SHOULDER, HUMAN_BODY_L_ELBOW],
  [HUMAN_BODY_L_ELBOW, HUMAN_BODY_L_WRIST],
  [HUMAN_BODY_NECK, HUMAN_BODY_M_HIP],
  [HUMAN_BODY_M_HIP, HUMAN_BODY_R_HIP],
  [HUMAN_BODY_R_HIP, HUMAN_BODY_R_KNEE],
  [HUMAN_BODY_R_KNEE, HUMAN_BODY_R_ANKLE],
  [HUMAN_BODY_R_ANKLE, HUMAN_BODY_R_BIG_TOE],
  [HUMAN_BODY_R_BIG_TOE, HUMAN_BODY_R_SMALL_TOE],
  [HUMAN_BODY_R_ANKLE, HUMAN_BODY_R_HEEL],
  [HUMAN_BODY_M_HIP, HUMAN_BODY_L_HIP],
  [HUMAN_BODY_L_HIP, HUMAN_BODY_L_KNEE],
  [HUMAN_BODY_L_KNEE, HUMAN_BODY_L_ANKLE],
  [HUMAN_BODY_L_ANKLE, HUMAN_BODY_L_BIG_TOE],
  [HUMAN_BODY_L_BIG_TOE, HUMAN_BODY_L_SMALL_TOE],
  [HUMAN_BODY_L_ANKLE, HUMAN_BODY_L_HEEL],
];

const COCO_PAIRS = [
  [HUMAN_BODY_NOSE, HUMAN_BODY_NECK],
  [HUMAN_BODY_NOSE, HUMAN_BODY_R_EYE],
  [HUMAN_BODY_R_EYE, HUMAN_BODY_R_EAR],
  [HUMAN_BODY_NOSE, HUMAN_BODY_L_EYE],
  [HUMAN_BODY_L_EYE, HUMAN_BODY_L_EAR],
  [HUMAN_BODY_NECK, HUMAN_BODY_R_SHOULDER],
  [HUMAN_BODY_R_SHOULDER, HUMAN_BODY_R_ELBOW],
  [HUMAN_BODY_R_ELBOW, HUMAN_BODY_R_WRIST],
  [HUMAN_BODY_NECK, HUMAN_BODY_L_SHOULDER],
  [HUMAN_BODY_L_SHOULDER, HUMAN_BODY_L_ELBOW],
  [HUMAN_BODY_L_ELBOW, HUMAN_BODY_L_WRIST],
  [HUMAN_BODY_NECK, HUMAN_BODY_R_HIP],
  [HUMAN_BODY_R_HIP, HUMAN_BODY_R_KNEE],
  [HUMAN_BODY_R_KNEE, HUMAN_BODY_R_ANKLE],
  [HUMAN_BODY_NECK, HUMAN_BODY_L_HIP],
  [HUMAN_BODY_L_HIP, HUMAN_BODY_L_KNEE],
  [HUMAN_BODY_L_KNEE, HUMAN_BODY_L_ANKLE],
];

const MPI_PAIRS = [
  [HUMAN_BODY_HEAD, HUMAN_BODY_NECK],
  [HUMAN_BODY_NECK, HUMAN_BODY_R_SHOULDER],
  [HUMAN_BODY_R_SHOULDER, HUMAN_BODY_R_ELBOW],
  [HUMAN_BODY_R_ELBOW, HUMAN_BODY_R_WRIST],
  [HUMAN_BODY_NECK, HUMAN_BODY_L_SHOULDER],
  [HUMAN_BODY_L_SHOULDER, HUMAN_BODY_L_ELBOW],
  [HUMAN_BODY_L_ELBOW, HUMAN_BODY_L_WRIST],
  [HUMAN_BODY_NECK, HUMAN_BODY_CHEST],
  [HUMAN_BODY_CHEST, HUMAN_BODY_R_HIP],
  [HUMAN_BODY_R_HIP, HUMAN_BODY_R_KNEE],
  [HUMAN_BODY_R_KNEE, HUMAN_BODY_R_ANKLE],
  [HUMAN_BODY_CHEST, HUMAN_BODY_L_HIP],
  [HUMAN_BODY_L_HIP, HUMAN_BODY_L_KNEE],
  [HUMAN_BODY_L_KNEE, HUMAN_BODY_L_ANKLE],
];

const LEFT_HAND_PAIRS = [
  [HUMAN_BODY_L_HAND, HUMAN_BODY_L_THUMB_1_CMC],
  [HUMAN_BODY_L_THUMB_1_CMC, HUMAN_BODY_L_THUMB_2_KNUCKLES],
  [HUMAN_BODY_L_THUMB_2_KNUCKLES, HUMAN_BODY_L_THUMB_3_IP],
  [HUMAN_BODY_L_THUMB_3_IP, HUMAN_BODY_L_THUMB_4_FINGER_TIP],
  [HUMAN_BODY_L_HAND, HUMAN_BODY_L_INDEX_1_KNUCKLES],
  [HUMAN_BODY_L_INDEX_1_KNUCKLES, HUMAN_BODY_L_INDEX_2_PIP],
  [HUMAN_BODY_L_INDEX_2_PIP, HUMAN_BODY_L_INDEX_3_DIP],
  [HUMAN_BODY_L_INDEX_3_DIP, HUMAN_BODY_L_INDEX_4_FINGER_TIP],
  [HUMAN_BODY_L_HAND, HUMAN_BODY_L_MIDDLE_1_KNUCKLES],
  [HUMAN_BODY_L_MIDDLE_1_KNUCKLES, HUMAN_BODY_L_MIDDLE_2_PIP],
  [HUMAN_BODY_L_MIDDLE_2_PIP, HUMAN_BODY_L_MIDDLE_3_DIP],
  [HUMAN_BODY_L_MIDDLE_3_DIP, HUMAN_BODY_L_MIDDLE_4_FINGER_TIP],
  [HUMAN_BODY_L_HAND, HUMAN_BODY_L_RING_1_KNUCKLES],
  [HUMAN_BODY_L_RING_1_KNUCKLES, HUMAN_BODY_L_RING_2_PIP],
  [HUMAN_BODY_L_RING_2_PIP, HUMAN_BODY_L_RING_3_DIP],
  [HUMAN_BODY_L_RING_3_DIP, HUMAN_BODY_L_RING_4_FINGER_TIP],
  [HUMAN_BODY_L_HAND, HUMAN_BODY_L_PINKY_1_KNUCKLES],
  [HUMAN_BODY_L_PINKY_1_KNUCKLES, HUMAN_BODY_L_PINKY_2_PIP],
  [HUMAN_BODY_L_PINKY_2_PIP, HUMAN_BODY_L_PINKY_3_DIP],
  [HUMAN_BODY_L_PINKY_3_DIP, HUMAN_BODY_L_PINKY_4_FINGER_TIP],
];

const RIGHT_HAND_PAIRS = [
  [HUMAN_BODY_R_HAND, HUMAN_BODY_R_THUMB_1_CMC],
  [HUMAN_BODY_R_THUMB_1_CMC, HUMAN_BODY_R_THUMB_2_KNUCKLES],
  [HUMAN_BODY_R_THUMB_2_KNUCKLES, HUMAN_BODY_R_THUMB_3_IP],
  [HUMAN_BODY_R_THUMB_3_IP, HUMAN_BODY_R_THUMB_4_FINGER_TIP],
  [HUMAN_BODY_R_HAND, HUMAN_BODY_R_INDEX_1_KNUCKLES],
  [HUMAN_BODY_R_INDEX_1_KNUCKLES, HUMAN_BODY_R_INDEX_2_PIP],
  [HUMAN_BODY_R_INDEX_2_PIP, HUMAN_BODY_R_INDEX_3_DIP],
  [HUMAN_BODY_R_INDEX_3_DIP, HUMAN_BODY_R_INDEX_4_FINGER_TIP],
  [HUMAN_BODY_R_HAND, HUMAN_BODY_R_MIDDLE_1_KNUCKLES],
  [HUMAN_BODY_R_MIDDLE_1_KNUCKLES, HUMAN_BODY_R_MIDDLE_2_PIP],
  [HUMAN_BODY_R_MIDDLE_2_PIP, HUMAN_BODY_R_MIDDLE_3_DIP],
  [HUMAN_BODY_R_MIDDLE_3_DIP, HUMAN_BODY_R_MIDDLE_4_FINGER_TIP],
  [HUMAN_BODY_R_HAND, HUMAN_BODY_R_RING_1_KNUCKLES],
  [HUMAN_BODY_R_RING_1_KNUCKLES, HUMAN_BODY_R_RING_2_PIP],
  [HUMAN_BODY_R_RING_2_PIP, HUMAN_BODY_R_RING_3_DIP],
  [HUMAN_BODY_R_RING_3_DIP, HUMAN_BODY_R_RING_4_FINGER_TIP],
  [HUMAN_BODY_R_HAND, HUMAN_BODY_R_PINKY_1_KNUCKLES],
  [HUMAN_BODY_R_PINKY_1_KNUCKLES, HUMAN_BODY_R_PINKY_2_PIP],
  [HUMAN_BODY_R_PINKY_2_PIP, HUMAN_BODY_R_PINKY_3_DIP],
  [HUMAN_BODY_R_PINKY_3_DIP, HUMAN_BODY_R_PINKY_4_FINGER_TIP],
];

const FACE_PAIRS = [
  [HUMAN_BODY_FACE_COUNTOUR_0, HUMAN_BODY_FACE_COUNTOUR_1],
  [HUMAN_BODY_FACE_COUNTOUR_1, HUMAN_BODY_FACE_COUNTOUR_2],
  [HUMAN_BODY_FACE_COUNTOUR_2, HUMAN_BODY_FACE_COUNTOUR_3],
  [HUMAN_BODY_FACE_COUNTOUR_3, HUMAN_BODY_FACE_COUNTOUR_4],
  [HUMAN_BODY_FACE_COUNTOUR_4, HUMAN_BODY_FACE_COUNTOUR_5],
  [HUMAN_BODY_FACE_COUNTOUR_5, HUMAN_BODY_FACE_COUNTOUR_6],
  [HUMAN_BODY_FACE_COUNTOUR_6, HUMAN_BODY_FACE_COUNTOUR_7],
  [HUMAN_BODY_FACE_COUNTOUR_7, HUMAN_BODY_FACE_COUNTOUR_8],
  [HUMAN_BODY_FACE_COUNTOUR_8, HUMAN_BODY_FACE_COUNTOUR_9],
  [HUMAN_BODY_FACE_COUNTOUR_9, HUMAN_BODY_FACE_COUNTOUR_10],
  [HUMAN_BODY_FACE_COUNTOUR_10, HUMAN_BODY_FACE_COUNTOUR_11],
  [HUMAN_BODY_FACE_COUNTOUR_11, HUMAN_BODY_FACE_COUNTOUR_12],
  [HUMAN_BODY_FACE_COUNTOUR_12, HUMAN_BODY_FACE_COUNTOUR_13],
  [HUMAN_BODY_FACE_COUNTOUR_13, HUMAN_BODY_FACE_COUNTOUR_14],
  [HUMAN_BODY_FACE_COUNTOUR_14, HUMAN_BODY_FACE_COUNTOUR_15],
  [HUMAN_BODY_FACE_COUNTOUR_15, HUMAN_BODY_FACE_COUNTOUR_16],
  [HUMAN_BODY_R_EYE_BROW_0, HUMAN_BODY_R_EYE_BROW_1],
  [HUMAN_BODY_R_EYE_BROW_1, HUMAN_BODY_R_EYE_BROW_2],
  [HUMAN_BODY_R_EYE_BROW_2, HUMAN_BODY_R_EYE_BROW_3],
  [HUMAN_BODY_R_EYE_BROW_3, HUMAN_BODY_R_EYE_BROW_4],
  [HUMAN_BODY_L_EYE_BROW_4, HUMAN_BODY_L_EYE_BROW_3],
  [HUMAN_BODY_L_EYE_BROW_3, HUMAN_BODY_L_EYE_BROW_2],
  [HUMAN_BODY_L_EYE_BROW_2, HUMAN_BODY_L_EYE_BROW_1],
  [HUMAN_BODY_L_EYE_BROW_1, HUMAN_BODY_L_EYE_BROW_0],
  [HUMAN_BODY_NOSE_UPPER_0, HUMAN_BODY_NOSE_UPPER_1],
  [HUMAN_BODY_NOSE_UPPER_1, HUMAN_BODY_NOSE_UPPER_2],
  [HUMAN_BODY_NOSE_UPPER_2, HUMAN_BODY_NOSE_UPPER_3],
  [HUMAN_BODY_NOSE_LOWER_0, HUMAN_BODY_NOSE_LOWER_1],
  [HUMAN_BODY_NOSE_LOWER_1, HUMAN_BODY_NOSE_LOWER_2],
  [HUMAN_BODY_NOSE_LOWER_2, HUMAN_BODY_NOSE_LOWER_3],
  [HUMAN_BODY_NOSE_LOWER_3, HUMAN_BODY_NOSE_LOWER_4],
  [HUMAN_BODY_R_EYE_0, HUMAN_BODY_R_EYE_1],
  [HUMAN_BODY_R_EYE_1, HUMAN_BODY_R_EYE_2],
  [HUMAN_BODY_R_EYE_2, HUMAN_BODY_R_EYE_3],
  [HUMAN_BODY_R_EYE_3, HUMAN_BODY_R_EYE_4],
  [HUMAN_BODY_R_EYE_4, HUMAN_BODY_R_EYE_5],
  [HUMAN_BODY_R_EYE_5, HUMAN_BODY_R_EYE_0],
  [HUMAN_BODY_L_EYE_0, HUMAN_BODY_L_EYE_1],
  [HUMAN_BODY_L_EYE_1, HUMAN_BODY_L_EYE_2],
  [HUMAN_BODY_L_EYE_2, HUMAN_BODY_L_EYE_3],
  [HUMAN_BODY_L_EYE_3, HUMAN_BODY_L_EYE_4],
  [HUMAN_BODY_L_EYE_4, HUMAN_BODY_L_EYE_5],
  [HUMAN_BODY_L_EYE_5, HUMAN_BODY_L_EYE_0],
  [HUMAN_BODY_O_MOUSE_0, HUMAN_BODY_O_MOUSE_1],
  [HUMAN_BODY_O_MOUSE_1, HUMAN_BODY_O_MOUSE_2],
  [HUMAN_BODY_O_MOUSE_2, HUMAN_BODY_O_MOUSE_3],
  [HUMAN_BODY_O_MOUSE_3, HUMAN_BODY_O_MOUSE_4],
  [HUMAN_BODY_O_MOUSE_4, HUMAN_BODY_O_MOUSE_5],
  [HUMAN_BODY_O_MOUSE_5, HUMAN_BODY_O_MOUSE_6],
  [HUMAN_BODY_O_MOUSE_6, HUMAN_BODY_O_MOUSE_7],
  [HUMAN_BODY_O_MOUSE_7, HUMAN_BODY_O_MOUSE_8],
  [HUMAN_BODY_O_MOUSE_8, HUMAN_BODY_O_MOUSE_9],
  [HUMAN_BODY_O_MOUSE_9, HUMAN_BODY_O_MOUSE_10],
  [HUMAN_BODY_O_MOUSE_10, HUMAN_BODY_O_MOUSE_11],
  [HUMAN_BODY_O_MOUSE_11, HUMAN_BODY_O_MOUSE_0],
  [HUMAN_BODY_I_MOUSE_0, HUMAN_BODY_I_MOUSE_1],
  [HUMAN_BODY_I_MOUSE_1, HUMAN_BODY_I_MOUSE_2],
  [HUMAN_BODY_I_MOUSE_2, HUMAN_BODY_I_MOUSE_3],
  [HUMAN_BODY_I_MOUSE_3, HUMAN_BODY_I_MOUSE_4],
  [HUMAN_BODY_I_MOUSE_4, HUMAN_BODY_I_MOUSE_5],
  [HUMAN_BODY_I_MOUSE_5, HUMAN_BODY_I_MOUSE_6],
  [HUMAN_BODY_I_MOUSE_6, HUMAN_BODY_I_MOUSE_7],
  [HUMAN_BODY_I_MOUSE_7, HUMAN_BODY_I_MOUSE_0],
];

const BODY_COLORS = new Array(HUMAN_BODY_L_PUPIL + 1);
BODY_COLORS.fill([255, 255, 255]);
BODY_COLORS[HUMAN_BODY_NOSE] = [255, 0, 85];
BODY_COLORS[HUMAN_BODY_NECK] = [255, 0, 0];
BODY_COLORS[HUMAN_BODY_R_SHOULDER] = [255, 85, 0];
BODY_COLORS[HUMAN_BODY_R_ELBOW] = [255, 170, 0];
BODY_COLORS[HUMAN_BODY_R_WRIST] = [255, 255, 0];
BODY_COLORS[HUMAN_BODY_L_SHOULDER] = [170, 255, 0];
BODY_COLORS[HUMAN_BODY_L_ELBOW] = [85, 255, 0];
BODY_COLORS[HUMAN_BODY_L_WRIST] = [0, 255, 0];
BODY_COLORS[HUMAN_BODY_M_HIP] = [255, 0, 0];
BODY_COLORS[HUMAN_BODY_R_HIP] = [0, 255, 85];
BODY_COLORS[HUMAN_BODY_R_KNEE] = [0, 255, 170];
BODY_COLORS[HUMAN_BODY_R_ANKLE] = [0, 255, 255];
BODY_COLORS[HUMAN_BODY_L_HIP] = [0, 170, 255];
BODY_COLORS[HUMAN_BODY_L_KNEE] = [0, 85, 255];
BODY_COLORS[HUMAN_BODY_L_ANKLE] = [0, 0, 255];
BODY_COLORS[HUMAN_BODY_R_EYE] = [255, 0, 170];
BODY_COLORS[HUMAN_BODY_L_EYE] = [170, 0, 255];
BODY_COLORS[HUMAN_BODY_R_EAR] = [255, 0, 255];
BODY_COLORS[HUMAN_BODY_L_EAR] = [85, 0, 255];
BODY_COLORS[HUMAN_BODY_L_BIG_TOE] = [0, 0, 255];
BODY_COLORS[HUMAN_BODY_L_SMALL_TOE] = [0, 0, 255];
BODY_COLORS[HUMAN_BODY_L_HEEL] = [0, 0, 255];
BODY_COLORS[HUMAN_BODY_R_BIG_TOE] = [0, 255, 255];
BODY_COLORS[HUMAN_BODY_R_SMALL_TOE] = [0, 255, 255];
BODY_COLORS[HUMAN_BODY_R_HEEL] = [0, 255, 255];
BODY_COLORS[HUMAN_BODY_HEAD] = BODY_COLORS[HUMAN_BODY_NONE];
BODY_COLORS[HUMAN_BODY_CHEST] = [0, 0, 255];

BODY_COLORS[HUMAN_BODY_L_HAND] = [100, 100, 100];
BODY_COLORS[HUMAN_BODY_L_THUMB_1_CMC] = [100, 0, 0];
BODY_COLORS[HUMAN_BODY_L_THUMB_2_KNUCKLES] = [150, 0, 0];
BODY_COLORS[HUMAN_BODY_L_THUMB_3_IP] = [200, 0, 0];
BODY_COLORS[HUMAN_BODY_L_THUMB_4_FINGER_TIP] = [255, 0, 0];
BODY_COLORS[HUMAN_BODY_L_INDEX_1_KNUCKLES] = [100, 100, 0];
BODY_COLORS[HUMAN_BODY_L_INDEX_2_PIP] = [150, 150, 0];
BODY_COLORS[HUMAN_BODY_L_INDEX_3_DIP] = [200, 200, 0];
BODY_COLORS[HUMAN_BODY_L_INDEX_4_FINGER_TIP] = [255, 255, 0];
BODY_COLORS[HUMAN_BODY_L_MIDDLE_1_KNUCKLES] = [0, 100, 50];
BODY_COLORS[HUMAN_BODY_L_MIDDLE_2_PIP] = [0, 150, 75];
BODY_COLORS[HUMAN_BODY_L_MIDDLE_3_DIP] = [0, 200, 100];
BODY_COLORS[HUMAN_BODY_L_MIDDLE_4_FINGER_TIP] = [0, 255, 125];
BODY_COLORS[HUMAN_BODY_L_RING_1_KNUCKLES] = [0, 50, 100];
BODY_COLORS[HUMAN_BODY_L_RING_2_PIP] = [0, 75, 150];
BODY_COLORS[HUMAN_BODY_L_RING_3_DIP] = [0, 100, 200];
BODY_COLORS[HUMAN_BODY_L_RING_4_FINGER_TIP] = [0, 125, 255];
BODY_COLORS[HUMAN_BODY_L_PINKY_1_KNUCKLES] = [100, 0, 100];
BODY_COLORS[HUMAN_BODY_L_PINKY_2_PIP] = [150, 0, 150];
BODY_COLORS[HUMAN_BODY_L_PINKY_3_DIP] = [200, 0, 200];
BODY_COLORS[HUMAN_BODY_L_PINKY_4_FINGER_TIP] = [255, 0, 255];

BODY_COLORS[HUMAN_BODY_R_HAND] = BODY_COLORS[HUMAN_BODY_L_HAND];
BODY_COLORS[HUMAN_BODY_R_THUMB_1_CMC] = BODY_COLORS[HUMAN_BODY_L_THUMB_1_CMC];
BODY_COLORS[HUMAN_BODY_R_THUMB_2_KNUCKLES] = BODY_COLORS[HUMAN_BODY_L_THUMB_2_KNUCKLES];
BODY_COLORS[HUMAN_BODY_R_THUMB_3_IP] = BODY_COLORS[HUMAN_BODY_L_THUMB_3_IP];
BODY_COLORS[HUMAN_BODY_R_THUMB_4_FINGER_TIP] = BODY_COLORS[HUMAN_BODY_L_THUMB_4_FINGER_TIP];
BODY_COLORS[HUMAN_BODY_R_INDEX_1_KNUCKLES] = BODY_COLORS[HUMAN_BODY_L_INDEX_1_KNUCKLES];
BODY_COLORS[HUMAN_BODY_R_INDEX_2_PIP] = BODY_COLORS[HUMAN_BODY_L_INDEX_2_PIP];
BODY_COLORS[HUMAN_BODY_R_INDEX_3_DIP] = BODY_COLORS[HUMAN_BODY_L_INDEX_3_DIP];
BODY_COLORS[HUMAN_BODY_R_INDEX_4_FINGER_TIP] = BODY_COLORS[HUMAN_BODY_L_INDEX_4_FINGER_TIP];
BODY_COLORS[HUMAN_BODY_R_MIDDLE_1_KNUCKLES] = BODY_COLORS[HUMAN_BODY_L_MIDDLE_1_KNUCKLES];
BODY_COLORS[HUMAN_BODY_R_MIDDLE_2_PIP] = BODY_COLORS[HUMAN_BODY_L_MIDDLE_2_PIP];
BODY_COLORS[HUMAN_BODY_R_MIDDLE_3_DIP] = BODY_COLORS[HUMAN_BODY_L_MIDDLE_3_DIP];
BODY_COLORS[HUMAN_BODY_R_MIDDLE_4_FINGER_TIP] = BODY_COLORS[HUMAN_BODY_L_MIDDLE_4_FINGER_TIP];
BODY_COLORS[HUMAN_BODY_R_RING_1_KNUCKLES] = BODY_COLORS[HUMAN_BODY_L_RING_1_KNUCKLES];
BODY_COLORS[HUMAN_BODY_R_RING_2_PIP] = BODY_COLORS[HUMAN_BODY_L_RING_2_PIP];
BODY_COLORS[HUMAN_BODY_R_RING_3_DIP] = BODY_COLORS[HUMAN_BODY_L_RING_3_DIP];
BODY_COLORS[HUMAN_BODY_R_RING_4_FINGER_TIP] = BODY_COLORS[HUMAN_BODY_L_RING_4_FINGER_TIP];
BODY_COLORS[HUMAN_BODY_R_PINKY_1_KNUCKLES] = BODY_COLORS[HUMAN_BODY_L_PINKY_1_KNUCKLES];
BODY_COLORS[HUMAN_BODY_R_PINKY_2_PIP] = BODY_COLORS[HUMAN_BODY_L_PINKY_2_PIP];
BODY_COLORS[HUMAN_BODY_R_PINKY_3_DIP] = BODY_COLORS[HUMAN_BODY_L_PINKY_3_DIP];
BODY_COLORS[HUMAN_BODY_R_PINKY_4_FINGER_TIP] = BODY_COLORS[HUMAN_BODY_L_PINKY_4_FINGER_TIP];

function getKeyPointColor(humanBody) {
  const [r, g, b] = BODY_COLORS[humanBody];
  return `rgb(${r}, ${g}, ${b})`;
}

class ImageWithHumansViewImpl extends Component {
  static propTypes = {
    width: PropTypes.string.isRequired,
    height: PropTypes.string.isRequired,
    frame: PropTypes.instanceOf(ImageWithHumansMessage),
    lineWidth: PropTypes.number,
    radius: PropTypes.number,
    threshold: PropTypes.number,
  };

  static defaultProps = {
    frame: null,
    lineWidth: 5,
    radius: 5,
    threshold: 0.5,
  };

  componentDidMount() {
    this.worker = new ImageWorker();

    this.keypoints = new Array(BODY_COLORS.length);

    this.worker.onmessage = event => {
      this._drawImageDataAndHumans(event.data);
    };
  }

  shouldComponentUpdate(nextProps) {
    const { frame, lineWidth, radius, threshold } = this.props;

    if (frame !== nextProps.frame) {
      this._loadImageData(nextProps.frame);
      return true;
    }

    if (
      lineWidth !== nextProps.lineWidth ||
      radius !== nextProps.radius ||
      threshold !== nextProps.threshold
    ) {
      return true;
    }

    return false;
  }

  componentWillUnmount() {
    this.worker.terminate();
  }

  _onCanvasLoad = (proxyCavnas, proxyContext, resizableCanvas) => {
    this.proxyCanvas = proxyCavnas;
    this.proxyContext = proxyContext;
    this.resizableCanvas = resizableCanvas;
  };

  _loadImageData(frame) {
    if (!this.proxyContext) {
      return;
    }

    if (!frame) return;

    const { image, model, humans } = frame;
    const { width, height } = image.size;

    this.worker.postMessage({
      imageData: this.proxyContext.getImageData(0, 0, width, height),
      image,
      data: {
        humans,
        model,
      },
    });
  }

  _drawImageDataAndHumans(data) {
    if (!this.proxyContext) {
      return;
    }

    if (!data) {
      this.resizableCanvas.clearRect();
      return;
    }

    const { imageData } = data;
    const { humans, model } = data.data;
    const { width, height } = imageData;
    const { radius, threshold } = this.props;

    this.proxyCanvas.width = width;
    this.proxyCanvas.height = height;

    this.proxyContext.putImageData(imageData, 0, 0);
    let hasHand = false;
    let hasFace = false;
    for (let i = 0; i < humans.length; i += 1) {
      this.keypoints.fill(undefined);
      const { humanBodies } = humans[i];
      for (let j = 0; j < humanBodies.length; j += 1) {
        const { humanBody, position, score } = humanBodies[j];
        if (score >= threshold) {
          this.keypoints[humanBody] = humanBodies[j];
          const { x, y } = position;
          hasHand |= humanBody >= HUMAN_BODY_L_HAND && humanBody <= HUMAN_BODY_R_PINKY_4_FINGER_TIP;
          hasFace |= humanBody >= HUMAN_BODY_FACE_COUNTOUR_0 && humanBody <= HUMAN_BODY_L_PUPIL;
          this.proxyContext.beginPath();
          this.proxyContext.fillStyle = getKeyPointColor(humanBody);
          this.proxyContext.arc(x, y, radius, 0, Math.PI * 2, false);
          this.proxyContext.fill();
        }
      }

      let pairs = null;
      if (model === HumanBodyModel.values.HUMAN_BODY_MODEL_BODY_25) {
        pairs = BODY_25_PAIRS;
      } else if (model === HumanBodyModel.values.HUMAN_BODY_MODEL_COCO) {
        pairs = COCO_PAIRS;
      } else if (model === HumanBodyModel.values.HUMAN_BODY_MODEL_MPI) {
        pairs = MPI_PAIRS;
      } else {
        console.error(`Unknown model ${model}`);
      }
      if (pairs) {
        this._connectPairs(pairs);
      }
      if (hasHand) {
        this._connectPairs(LEFT_HAND_PAIRS);
        this._connectPairs(RIGHT_HAND_PAIRS);
      }
      if (hasFace) {
        this._connectPairs(FACE_PAIRS);
      }
    }

    this.resizableCanvas.update();
  }

  _connectPairs(pairs) {
    const { lineWidth } = this.props;

    for (let j = 0; j < pairs.length; j += 1) {
      const [bodyIdx, body2Idx] = pairs[j];
      const body = this.keypoints[bodyIdx];
      const body2 = this.keypoints[body2Idx];
      if (body && body2) {
        this.proxyContext.beginPath();
        this.proxyContext.strokeStyle = getKeyPointColor(body2.humanBody);
        this.proxyContext.lineWidth = lineWidth;
        this.proxyContext.moveTo(body.position.x, body.position.y);
        this.proxyContext.lineTo(body2.position.x, body2.position.y);
        this.proxyContext.stroke();
      }
    }
  }

  render() {
    const { width, height } = this.props;

    return <ResizableCanvas width={width} height={height} onCanvasLoad={this._onCanvasLoad} />;
  }
}

@inject('store')
@observer
export default class ImageWithHumansView extends Component {
  static propTypes = {
    id: PropTypes.number.isRequired,
    store: PropTypes.object.isRequired,
  };

  state = {
    width: '100%',
    height: 'auto',
  };

  _onResize = panelState => {
    const { width, height } = this.state;
    const w = `${panelState.width}px`;
    const h = `${panelState.height}px`;
    if (width === w && height === h) return;
    this.setState({ width: w, height: h });
  };

  render() {
    const { id, store } = this.props;
    const { width, height } = this.state;
    const { uiState } = store;
    const viewState = store.uiState.findView(id);
    const { frame, threshold } = viewState;

    return (
      <ActivatableFloatPanel
        id={id}
        type='ImageWithHumansView'
        uiState={uiState}
        onUpdate={this._onResize}>
        <ImageWithHumansViewImpl
          width={width}
          height={height}
          frame={frame}
          threshold={threshold}
        />
      </ActivatableFloatPanel>
    );
  }
}
